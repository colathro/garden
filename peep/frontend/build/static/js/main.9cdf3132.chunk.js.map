{"version":3,"sources":["components/WaterLevel.tsx","App.tsx","index.tsx"],"names":["Example","useState","data","setData","useEffect","fetch","then","response","a","status","json","resp","output","sort","b","timestamp","currentHour","Date","setHours","getHours","currentHourSummary","sensor0","sensor0count","sensor1","sensor1count","sensor2","sensor2count","sensor3","sensor3count","forEach","record","sensor","voltage","push","summarizeData","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","activeDot","r","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAoIeA,EA1CC,WACZ,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAcA,OAbAC,qBAAU,WACNC,MAAM,kBAAkBC,KAAxB,uCAA6B,WAAOC,GAAP,eAAAC,EAAA,yDACD,MAApBD,EAASE,OADY,yCAEhB,MAFgB,uBAINF,EAASG,OAJH,cAInBC,EAJmB,yBAKlBA,GALkB,2CAA7B,uDAOGL,MAAK,SAACJ,GACO,MAARA,GACFC,EAjGQ,SAACD,GACnB,IAAIU,EAAyB,GAC7BV,EAAKW,MAAK,SAACL,EAAGM,GAAJ,OAAUN,EAAEO,UAAYD,EAAEC,aACpC,IAAIC,EAAc,IAAIC,KAAuB,IAAlBf,EAAK,GAAGa,WACnCC,EAAYE,SAASF,EAAYG,WAAa,GAE9C,IAAIC,EAAmC,CACnCC,QAAS,EACTC,aAAc,EACdC,QAAS,EACTC,aAAc,EACdC,QAAS,EACTC,aAAc,EACdC,QAAS,EACTC,aAAc,EACdb,UAAWC,GAiDf,OA9CAd,EAAK2B,SAAQ,SAAAC,GACT,GAAI,IAAIb,KAAsB,IAAjBa,EAAOf,WAAkBK,EAAmBL,UAErD,OAAQe,EAAOC,QACX,KAAK,EACDX,EAAmBE,cAAgB,EACnCF,EAAmBC,SAAWS,EAAOE,QACzC,MACA,KAAK,EACDZ,EAAmBI,cAAgB,EACnCJ,EAAmBG,SAAWO,EAAOE,QACzC,MACA,KAAK,EACDZ,EAAmBM,cAAgB,EACnCN,EAAmBK,SAAWK,EAAOE,QACzC,MACA,KAAK,EACDZ,EAAmBQ,cAAgB,EACnCR,EAAmBO,SAAWG,EAAOE,aAK7CZ,EAAmBC,QAAUD,EAAmBC,QAAUD,EAAmBE,aAC7EF,EAAmBG,QAAUH,EAAmBG,QAAUH,EAAmBI,aAC7EJ,EAAmBK,QAAUL,EAAmBK,QAAUL,EAAmBM,aAC7EN,EAAmBO,QAAUP,EAAmBO,QAAUP,EAAmBQ,aAE7EhB,EAAOqB,KAAKb,GAEZJ,EAAc,IAAIC,KAAKD,EAAYE,SAASF,EAAYG,WAAa,IAErEC,EAAqB,CACjBC,QAAS,EACTC,aAAc,EACdC,QAAS,EACTC,aAAc,EACdC,QAAS,EACTC,aAAc,EACdC,QAAS,EACTC,aAAc,EACdb,UAAWC,MAKhBJ,EAiCWsB,CAAchC,SAE7B,IAED,cAACiC,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAO,OAAzC,SACE,eAACC,EAAA,EAAD,CACEF,MAAO,IACPC,OAAQ,IACRnC,KAAMA,EACNqC,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,UAWE,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,cACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,UAAUM,OAAO,UAAUC,UAAW,CAAEC,EAAG,KACzE,cAACJ,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,UAAUM,OAAO,UAAUC,UAAW,CAAEC,EAAG,KACzE,cAACJ,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,UAAUM,OAAO,UAAUC,UAAW,CAAEC,EAAG,KACzE,cAACJ,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,UAAUM,OAAO,UAAUC,UAAW,CAAEC,EAAG,WCpHpEC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,O,OCARC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9cdf3132.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport internal from 'stream';\n\nconst summarizeData = (data: WaterLevel[]) => {\n    let output : HourSummary[] = [];\n    data.sort((a, b) => a.timestamp - b.timestamp)\n    let currentHour = new Date(data[0].timestamp*1000);\n    currentHour.setHours(currentHour.getHours() + 1)\n\n    let currentHourSummary : HourSummary = {\n        sensor0: 0,\n        sensor0count: 0,\n        sensor1: 0,\n        sensor1count: 0,\n        sensor2: 0,\n        sensor2count: 0,\n        sensor3: 0,\n        sensor3count: 0,\n        timestamp: currentHour\n    }\n    \n    data.forEach(record => {\n        if (new Date(record.timestamp*1000) < currentHourSummary.timestamp)\n        {\n            switch (record.sensor) {\n                case 0:\n                    currentHourSummary.sensor0count += 1;\n                    currentHourSummary.sensor0 += record.voltage;\n                break;\n                case 1:\n                    currentHourSummary.sensor1count += 1;\n                    currentHourSummary.sensor1 += record.voltage;\n                break;\n                case 2:\n                    currentHourSummary.sensor2count += 1;\n                    currentHourSummary.sensor2 += record.voltage;\n                break;\n                case 3:\n                    currentHourSummary.sensor3count += 1;\n                    currentHourSummary.sensor3 += record.voltage;\n                break;\n            }\n        }\n        else {\n            currentHourSummary.sensor0 = currentHourSummary.sensor0 / currentHourSummary.sensor0count;\n            currentHourSummary.sensor1 = currentHourSummary.sensor1 / currentHourSummary.sensor1count;\n            currentHourSummary.sensor2 = currentHourSummary.sensor2 / currentHourSummary.sensor2count;\n            currentHourSummary.sensor3 = currentHourSummary.sensor3 / currentHourSummary.sensor3count;\n\n            output.push(currentHourSummary);\n\n            currentHour = new Date(currentHour.setHours(currentHour.getHours() + 1));\n            \n            currentHourSummary = {\n                sensor0: 0,\n                sensor0count: 0,\n                sensor1: 0,\n                sensor1count: 0,\n                sensor2: 0,\n                sensor2count: 0,\n                sensor3: 0,\n                sensor3count: 0,\n                timestamp: currentHour\n            }\n        }\n    });\n\n    return output;\n}\n\ntype WaterLevel = {\n    sensor: number;\n    voltage: number;\n    timestamp: number;\n}\n\ntype HourSummary = {\n    sensor0: number;\n    sensor0count: number;\n    sensor1: number;\n    sensor1count: number;\n    sensor2: number;\n    sensor2count: number;\n    sensor3: number;\n    sensor3count: number;\n    timestamp: Date;\n}\n\nconst Example = () => {\n    const [data, setData] = useState<HourSummary[]>();\n    useEffect(() => {\n        fetch('api/water/week').then(async (response) => {\n            if (response.status === 400) {\n              return null;\n            }\n            const resp = await response.json();\n            return resp;\n          })\n          .then((data:WaterLevel[]) => {\n            if (data != null) {\n              setData(summarizeData(data));         }\n          });\n    }, [])\n    return (\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"timestamp\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"sensor0\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n          <Line type=\"monotone\" dataKey=\"sensor1\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n          <Line type=\"monotone\" dataKey=\"sensor2\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n          <Line type=\"monotone\" dataKey=\"sensor3\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      </ResponsiveContainer>\n    );\n}\n\nexport default Example;\n","import Example from \"./components/WaterLevel\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <Example/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}